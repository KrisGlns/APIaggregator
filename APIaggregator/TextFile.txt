Notes for this project

Weather and News api seems to be working just fine. 

[HttpGet("weather")]
public async Task<IActionResult> GetWeather([FromQuery] string city)
{
    var response = new ApiSection<WeatherData?>();

    try
    {
        var weather = await _weatherService.GetWeatherForCityAsync(city);
        response.Data = weather;
    }
    catch (Exception ex)
    {
        response.Status = "error";
        response.ErrorMessage = $"Error fetching weather data: {ex.Message}";
    }

    return Ok(response);
}

[HttpGet("news")]
public async Task<IActionResult> GetNews(
    [FromQuery] string topic,
    [FromQuery] string? sort = null)
{
    var response = new ApiSection<List<NewsArticle>>() { Data = new List<NewsArticle>() };

    try
    {
        var news = await _newsService.GetEverythingAsync(topic);
        if (news == null || news.Count == 0)
        {
            response.Status = "error";
            response.ErrorMessage = "No information found for the requested topic";
        }
        else
        {
            response.Data = !string.IsNullOrWhiteSpace(sort) ? SortNews(news, sort) : news;
        }
    }
    catch (Exception ex)
    {
        response.Status = "error";
        response.ErrorMessage = $"Error fetching news data: {ex.Message}";
    }

    return Ok(response);
}

[HttpGet("github")]
public async Task<IActionResult> GetGithubRepos([FromQuery] string username)
{
    var response = new ApiSection<List<GithubRepo>>() { Data = new List<GithubRepo>() };

    try
    {
        var repos = await _githubService.GetReposForUserAsync(username);
        if (repos == null || repos.Count == 0)
        {
            response.Status = "error";
            response.ErrorMessage = "No repositories found or user does not exist.";
        }
        else
        {
            response.Data = repos;
        }
    }
    catch (Exception ex)
    {
        response.Status = "error";
        response.ErrorMessage = $"Error fetching GitHub repos: {ex.Message}";
    }

    return Ok(response);
}

// TO-DO
{
    1) Set filter for units in wehater api to set it dynamically 
    2) Create a general DTO for the response type since all are the same 
}